
int	sort_and_print_operations(p)
{
	//going for radix sort
	chamber = (int *)malloc(sizeof(int) * arrsize);
	use chamber in every divs. -> get idx for every elements.;
	getting u_val for every ints;
		1. pushing absolute val of negative min for every ints.
		2. sort, push positive fisrt and sort, push for negative nums.
		-> gonna compare both methods and will pick the better one.
	push, swap in accordance with idx comparision between chamber;
	/*in fact, getting the answer array, is not the thing.
	the process that matching existing stack with the answer array is the real deal.*/
	using two int_arrs as bucket, make the answer arr;
}

int	*get_idx_chamber(p)
{
	//making idx_chamber for stacks to match
	get two temp_chambers;
	copy initial stack to 1st_chamber;
	while ()
		using another chamber as bucket, radix sort;
	return (chamber);
}

void	configure_stack()
{
	//first loop -> 
}

int	main(int argc, char **argv)
{
	if (no parameter are specified)
		 give the prompt back;
	else if (some args arent int ||
			some args are bigger than int ||
			there are duplicates)
		display "Error\n" on stderr;

	push_args_to_a(argv);
	if (already sorted)
		return (0);
	idx_chamber = get_idx_chamber(p); //sorting takes place
	configure_stack(p, idx_chamber); //moving stacks to the right idx -> coms used here.
	return (1);
}
